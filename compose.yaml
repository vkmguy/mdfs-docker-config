version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
  
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zookeeper
      - kafka
  
  conduktor-platform:
    image: conduktor/conduktor-platform:latest
    hostname: conduktor-platform
    container_name: conduktor-platform
    ports:
      - "8080:8080"
    volumes:
      - conduktor_data:/var/conduktor
      - type: bind
        source: "./platform-config.yml"
        target: /opt/conduktor/platform-config.yaml
        read_only: true
    depends_on:
      - kafka
      - kafka-schema-registry
    environment:
      CDK_IN_CONF_FILE: /opt/conduktor/platform-config.yaml
      KAFKA_BOOTSTRAP_SERVER: PLAINTEXT://kafka:19092
      SR_SERVER: "http://kafka-schema-registry:8081"
      ORGANISATION_NAME: "default"
      CDK_ADMIN_EMAIL: "admin@conduktor.io"
      CDK_ADMIN_PASSWORD: "admin"
  nimbus:
    image: storm:2.2.0
    container_name: nimbus
    command: storm nimbus
    restart: always
    ports:
      - "6627:6627"
    environment:
      - STORM_LOCAL_HOSTNAME=nimbus
    depends_on:
      - zookeeper
    links:
      - zookeeper

  supervisor:
    image: storm:2.2.0
    container_name: supervisor
    command: storm supervisor
    depends_on:
      - nimbus
      - zookeeper
    links:
      - nimbus
      - zookeeper
    restart: always
    environment:
      - STORM_LOCAL_HOSTNAME=supervisor
      - STORM_NIMBUS_SEEDS=nimbus

  storm-ui:
    image: storm:2.2.0
    container_name: storm-ui
    command: storm ui
    ports:
      - "8082:8080"
    environment:
      - STORM_LOCAL_HOSTNAME=ui
      - STORM_NIMBUS_SEEDS=nimbus
    depends_on:
      - nimbus
    links:
      - nimbus

  webserver:
    image: apache/airflow:2.1.2
    container_name: airflow-webserver
    entrypoint: /entrypoint.sh
    environment:
      - _AIRFLOW_WWW_USER_CREATE=True
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow_db/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwvnIUrey
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=ygwEdpkhWbz_geBaN6FTwt526ONEoP0w-vpQ38hend4=
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./airflow_scripts/entrypoint.sh:/entrypoint.sh
    ports:
      - "8083:8080"
    command: webserver
    depends_on:
      - postgres

  scheduler:
    image: apache/airflow:2.1.2
    container_name: airflow-scheduler
    environment:
      - _AIRFLOW_WWW_USER_CREATE=True
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow_db/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwvnIUrey
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=ygwEdpkhWbz_geBaN6FTwt526ONEoP0w-vpQ38hend4=
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler
    depends_on:
      - webserver

  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    ports:
      - "3000:3000"
  db:
    build:
      context: ../database-service
    image: db
    container_name: db
    hostname: db
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  airflow_db:
    image: postgres:13
    container_name: airflow_db
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - ./airflow_pgdata:/var/lib/postgresql/data

volumes:
  pgdata:
  airflow_pgdata:
  dags:
  logs:
  plugins:
  kafka-volume:
  zookeeper-volume:
  conduktor_data: {}